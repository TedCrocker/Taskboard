<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serilog.Sinks.AzureTableStorage</name>
    </assembly>
    <members>
        <member name="T:Serilog.LoggerConfigurationAzureTableStorageExtensions">
            <summary>
            Adds the WriteTo.AzureTableStorage() extension method to <see cref="T:Serilog.LoggerConfiguration"/>.
            </summary>
        </member>
        <member name="F:Serilog.LoggerConfigurationAzureTableStorageExtensions.DefaultBatchPostingLimit">
            <summary>
            A reasonable default for the number of events posted in
            each batch.
            </summary>
        </member>
        <member name="F:Serilog.LoggerConfigurationAzureTableStorageExtensions.DefaultPeriod">
            <summary>
            A reasonable default time to wait between checking for event batches.
            </summary>
        </member>
        <member name="M:Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(Serilog.Configuration.LoggerSinkConfiguration,Microsoft.WindowsAzure.Storage.CloudStorageAccount,Serilog.Events.LogEventLevel,System.IFormatProvider,System.String,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            Adds a sink that writes log events as records in the 'LogEventEntity' Azure Table Storage table in the given storage account.
            </summary>
            <param name="loggerConfiguration">The logger configuration.</param>
            <param name="storageAccount">The Cloud Storage Account to use to insert the log entries to.</param>
            <param name="restrictedToMinimumLevel">The minimum log event level required in order to write an event to the sink.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
            <param name="writeInBatches">Use a periodic batching sink, as opposed to a synchronous one-at-a-time sink; this alters the partition
            key used for the events so is not enabled by default.</param>
            <param name="batchPostingLimit">The maximum number of events to post in a single batch.</param>
            <param name="period">The time to wait between checking for event batches.</param>
            <returns>Logger configuration, allowing configuration to continue.</returns>
            <exception cref="T:System.ArgumentNullException">A required parameter is null.</exception>
        </member>
        <member name="M:Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(Serilog.Configuration.LoggerSinkConfiguration,System.String,Serilog.Events.LogEventLevel,System.IFormatProvider,System.String,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
            <summary>
            Adds a sink that writes log events as records in the 'LogEventEntity' Azure Table Storage table in the given storage account.
            </summary>
            <param name="loggerConfiguration">The logger configuration.</param>
            <param name="connectionString">The Cloud Storage Account connection string to use to insert the log entries to.</param>
            <param name="restrictedToMinimumLevel">The minimum log event level required in order to write an event to the sink.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
            <param name="writeInBatches">Use a periodic batching sink, as opposed to a synchronous one-at-a-time sink; this alters the partition
            key used for the events so is not enabled by default.</param>
            <param name="batchPostingLimit">The maximum number of events to post in a single batch.</param>
            <param name="period">The time to wait between checking for event batches.</param>
            <returns>Logger configuration, allowing configuration to continue.</returns>
            <exception cref="T:System.ArgumentNullException">A required parameter is null.</exception>
        </member>
        <member name="T:Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions">
            <summary>
            Adds the WriteTo.AzureTableStorageWithProperties() extension method to <see cref="T:Serilog.LoggerConfiguration"/>.
            </summary>
        </member>
        <member name="F:Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.DefaultBatchPostingLimit">
            <summary>
            A reasonable default for the number of events posted in
            each batch.
            </summary>
        </member>
        <member name="F:Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.DefaultPeriod">
            <summary>
            A reasonable default time to wait between checking for event batches.
            </summary>
        </member>
        <member name="M:Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.AzureTableStorageWithProperties(Serilog.Configuration.LoggerSinkConfiguration,Microsoft.WindowsAzure.Storage.CloudStorageAccount,Serilog.Events.LogEventLevel,System.IFormatProvider,System.String,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.String)">
            <summary>
            Adds a sink that writes log events as records in the 'LogEventEntity' Azure Table Storage table in the given storage account.
            </summary>
            <param name="loggerConfiguration">The logger configuration.</param>
            <param name="storageAccount">The Cloud Storage Account to use to insert the log entries to.</param>
            <param name="restrictedToMinimumLevel">The minimum log event level required in order to write an event to the sink.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
            <param name="writeInBatches">Use a periodic batching sink, as opposed to a synchronous one-at-a-time sink; this alters the partition
            key used for the events so is not enabled by default.</param>
            <param name="batchPostingLimit">The maximum number of events to post in a single batch.</param>
            <param name="period">The time to wait between checking for event batches.</param>
            <param name="additionalRowKeyPostfix">Additional postfix string that will be appended to row keys</param>
            <returns>Logger configuration, allowing configuration to continue.</returns>
            <exception cref="T:System.ArgumentNullException">A required parameter is null.</exception>
        </member>
        <member name="M:Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.AzureTableStorageWithProperties(Serilog.Configuration.LoggerSinkConfiguration,System.String,Serilog.Events.LogEventLevel,System.IFormatProvider,System.String,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.String)">
            <summary>
            Adds a sink that writes log events as records in the 'LogEventEntity' Azure Table Storage table in the given storage account.
            </summary>
            <param name="loggerConfiguration">The logger configuration.</param>
            <param name="connectionString">The Cloud Storage Account connection string to use to insert the log entries to.</param>
            <param name="restrictedToMinimumLevel">The minimum log event level required in order to write an event to the sink.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
            <param name="writeInBatches">Use a periodic batching sink, as opposed to a synchronous one-at-a-time sink; this alters the partition
            key used for the events so is not enabled by default.</param>
            <param name="batchPostingLimit">The maximum number of events to post in a single batch.</param>
            <param name="period">The time to wait between checking for event batches.</param>
            <param name="additionalRowKeyPostfix">Additional postfix string that will be appended to row keys</param>
            <returns>Logger configuration, allowing configuration to continue.</returns>
            <exception cref="T:System.ArgumentNullException">A required parameter is null.</exception>
        </member>
        <member name="T:Serilog.Sinks.AzureTableStorage.AzurePropertyFormatter">
            <summary>
            Converts <see cref="T:Serilog.Events.LogEventProperty"/> values into simple scalars,
            dictionaries and lists so that they can be persisted in Azure Table Storage.
            </summary>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzurePropertyFormatter.ToEntityProperty(Serilog.Events.LogEventPropertyValue,System.String,System.IFormatProvider)">
            <summary>
            Simplify the object so as to make handling the serialized
            representation easier.
            </summary>
            <param name="value">The value to simplify (possibly null).</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <returns>An Azure Storage entity EntityProperty</returns>
        </member>
        <member name="T:Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageSink">
            <summary>
            Writes log events as records to an Azure Table Storage table.
            </summary>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageSink.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.IFormatProvider,System.Int32,System.TimeSpan,System.String)">
            <summary>
            Construct a sink that saves logs to the specified storage account.
            </summary>
            <param name="storageAccount">The Cloud Storage Account to use to insert the log entries to.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="batchSizeLimit"></param>
            <param name="period"></param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})">
            <summary>
            Emit a batch of log events, running to completion synchronously.
            </summary>
            <param name="events">The events to emit.</param>
            <remarks>Override either <see cref="M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})"/> or <see cref="M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})"/>,
            not both.</remarks>
        </member>
        <member name="T:Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageWithPropertiesSink">
            <summary>
            Writes log events as records to an Azure Table Storage table.
            </summary>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageWithPropertiesSink.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.IFormatProvider,System.Int32,System.TimeSpan,System.String,System.String)">
            <summary>
            Construct a sink that saves logs to the specified storage account.
            </summary>
            <param name="storageAccount">The Cloud Storage Account to use to insert the log entries to.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="batchSizeLimit"></param>
            <param name="period"></param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
            <param name="additionalRowKeyPostfix">Additional postfix string that will be appended to row keys</param>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageWithPropertiesSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})">
            <summary>
            Emit a batch of log events, running to completion synchronously.
            </summary>
            <param name="events">The events to emit.</param>
            <remarks>Override either <see cref="M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatch(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})"/> or <see cref="M:Serilog.Sinks.PeriodicBatching.PeriodicBatchingSink.EmitBatchAsync(System.Collections.Generic.IEnumerable{Serilog.Events.LogEvent})"/>,
            not both.</remarks>
        </member>
        <member name="T:Serilog.Sinks.AzureTableStorage.AzureTableStorageSink">
            <summary>
            Writes log events as records to an Azure Table Storage table.
            </summary>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureTableStorageSink.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.IFormatProvider,System.String)">
            <summary>
            Construct a sink that saves logs to the specified storage account.
            </summary>
            <param name="storageAccount">The Cloud Storage Account to use to insert the log entries to.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureTableStorageSink.Emit(Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureTableStorageSink.EnsureUniqueRowKey(Microsoft.WindowsAzure.Storage.Table.ITableEntity)">
            <summary>
            Appends an incrementing index to the row key to ensure that it will
            not conflict with existing rows created at the same time / with the
            same partition key.
            </summary>
            <param name="logEventEntity"></param>
        </member>
        <member name="T:Serilog.Sinks.AzureTableStorage.AzureTableStorageWithPropertiesSink">
            <summary>
            Writes log events as records to an Azure Table Storage table storing properties as columns.
            </summary>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureTableStorageWithPropertiesSink.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.IFormatProvider,System.String,System.String)">
            <summary>
            Construct a sink that saves logs to the specified storage account.
            </summary>
            <param name="storageAccount">The Cloud Storage Account to use to insert the log entries to.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="storageTableName">Table name that log entries will be written to. Note: Optional, setting this may impact performance</param>
            <param name="additionalRowKeyPostfix">Additional postfix string that will be appended to row keys</param>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureTableStorageWithPropertiesSink.Emit(Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="T:Serilog.Sinks.AzureTableStorage.LogEventEntity">
            <summary>
            Represents a single log event for the Serilog Azure Table Storage Sink.
            </summary>
            <remarks>
            The PartitionKey is set to "0" followed by the ticks of the log event time (in UTC) as per what Azure Diagnostics logging has.
            The RowKey is set to "{Level}|{MessageTemplate}" to allow you to search for certain categories of log messages or indeed for a
                specific log message quickly using the indexing in Azure Table Storage.
            </remarks>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.LogEventEntity.#ctor">
            <summary>
            Default constructor for the Storage Client library to re-hydrate entities when querying.
            </summary>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.LogEventEntity.#ctor(Serilog.Events.LogEvent,System.IFormatProvider,System.Int64)">
            <summary>
            Create a log event entity from a Serilog <see cref="T:Serilog.Events.LogEvent"/>.
            </summary>
            <param name="log">The event to log</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="partitionKey"></param>
        </member>
        <member name="P:Serilog.Sinks.AzureTableStorage.LogEventEntity.MessageTemplate">
            <summary>
            The template that was used for the log message.
            </summary>
        </member>
        <member name="P:Serilog.Sinks.AzureTableStorage.LogEventEntity.Level">
            <summary>
            The level of the log.
            </summary>
        </member>
        <member name="P:Serilog.Sinks.AzureTableStorage.LogEventEntity.Exception">
            <summary>
            A string representation of the exception that was attached to the log (if any).
            </summary>
        </member>
        <member name="P:Serilog.Sinks.AzureTableStorage.LogEventEntity.RenderedMessage">
            <summary>
            The rendered log message.
            </summary>
        </member>
        <member name="P:Serilog.Sinks.AzureTableStorage.LogEventEntity.Data">
            <summary>
            A JSON-serialised representation of the data attached to the log message.
            </summary>
        </member>
        <member name="T:Serilog.Sinks.AzureTableStorage.AzureTableStorageEntityFactory">
            <summary>
            Utility class for Azure Storage Table entity
            </summary>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureTableStorageEntityFactory.CreateEntityWithProperties(Serilog.Events.LogEvent,System.IFormatProvider,System.String)">
            <summary>
            Creates a DynamicTableEntity for Azure Storage, given a Serilog <see cref="T:Serilog.Events.LogEvent"/>.Properties
            are stored as separate columns.
            </summary>
            <param name="logEvent">The event to log</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="additionalRowKeyPostfix">Additional postfix string that will be appended to row keys</param>
            <returns></returns>
        </member>
        <member name="M:Serilog.Sinks.AzureTableStorage.AzureTableStorageEntityFactory.GetValidStringForTableKey(System.String)">
            <summary>
            Generate a valid string for a table property key by removing invalid characters
            </summary>
            <param name="s">
            The input string
            </param>
            <returns>
            The string that can be used as a property
            </returns>
        </member>
    </members>
</doc>
